// Code generated by MockGen. DO NOT EDIT.
// Source: cmshim/watcher.go

// Package mock_cmshim is a generated GoMock package.
package cmshim

import (
	gomock "github.com/golang/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	reflect "reflect"
)

// MockResourceController is a mock of ResourceController interface
type MockResourceController struct {
	ctrl     *gomock.Controller
	recorder *MockResourceControllerMockRecorder
}

// MockResourceControllerMockRecorder is the mock recorder for MockResourceController
type MockResourceControllerMockRecorder struct {
	mock *MockResourceController
}

// NewMockResourceController creates a new mock instance
func NewMockResourceController(ctrl *gomock.Controller) *MockResourceController {
	mock := &MockResourceController{ctrl: ctrl}
	mock.recorder = &MockResourceControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceController) EXPECT() *MockResourceControllerMockRecorder {
	return m.recorder
}

// ResourceAdded mocks base method
func (m *MockResourceController) ResourceAdded(resource *unstructured.Unstructured) {
	m.ctrl.Call(m, "ResourceAdded", resource)
}

// ResourceAdded indicates an expected call of ResourceAdded
func (mr *MockResourceControllerMockRecorder) ResourceAdded(resource interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceAdded", reflect.TypeOf((*MockResourceController)(nil).ResourceAdded), resource)
}

// ResourceUpdated mocks base method
func (m *MockResourceController) ResourceUpdated(oldResource, newResource *unstructured.Unstructured) {
	m.ctrl.Call(m, "ResourceUpdated", oldResource, newResource)
}

// ResourceUpdated indicates an expected call of ResourceUpdated
func (mr *MockResourceControllerMockRecorder) ResourceUpdated(oldResource, newResource interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceUpdated", reflect.TypeOf((*MockResourceController)(nil).ResourceUpdated), oldResource, newResource)
}

// ResourceDeleted mocks base method
func (m *MockResourceController) ResourceDeleted(resource *unstructured.Unstructured) {
	m.ctrl.Call(m, "ResourceDeleted", resource)
}

// ResourceDeleted indicates an expected call of ResourceDeleted
func (mr *MockResourceControllerMockRecorder) ResourceDeleted(resource interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceDeleted", reflect.TypeOf((*MockResourceController)(nil).ResourceDeleted), resource)
}

// NotifySynced mocks base method
func (m *MockResourceController) NotifySynced() {
	m.ctrl.Call(m, "NotifySynced")
}

// NotifySynced indicates an expected call of NotifySynced
func (mr *MockResourceControllerMockRecorder) NotifySynced() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySynced", reflect.TypeOf((*MockResourceController)(nil).NotifySynced))
}

// MockErrorLogger is a mock of ErrorLogger interface
type MockErrorLogger struct {
	ctrl     *gomock.Controller
	recorder *MockErrorLoggerMockRecorder
}

// MockErrorLoggerMockRecorder is the mock recorder for MockErrorLogger
type MockErrorLoggerMockRecorder struct {
	mock *MockErrorLogger
}

// NewMockErrorLogger creates a new mock instance
func NewMockErrorLogger(ctrl *gomock.Controller) *MockErrorLogger {
	mock := &MockErrorLogger{ctrl: ctrl}
	mock.recorder = &MockErrorLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorLogger) EXPECT() *MockErrorLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockErrorLogger) Error(err error) {
	m.ctrl.Call(m, "Error", err)
}

// Error indicates an expected call of Error
func (mr *MockErrorLoggerMockRecorder) Error(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockErrorLogger)(nil).Error), err)
}
